
TM1637.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002218  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800235c  0800235c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800235c  0800235c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800235c  0800235c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800235c  0800235c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002360  08002360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000001c  08002380  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08002380  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ed3  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001858  00000000  00000000  00025f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  00027770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  00027de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168bf  00000000  00000000  00028378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079c0  00000000  00000000  0003ec37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ffab  00000000  00000000  000465f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c65a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000175c  00000000  00000000  000c65f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800230c 	.word	0x0800230c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800230c 	.word	0x0800230c

0800014c <DWT_Init>:
#define DWT_CONTROL *(volatile unsigned long *)0xE0001000
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC


void DWT_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <DWT_Init+0x24>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <DWT_Init+0x24>)
 8000156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800015a:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 800015c:	4b05      	ldr	r3, [pc, #20]	; (8000174 <DWT_Init+0x28>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a04      	ldr	r2, [pc, #16]	; (8000174 <DWT_Init+0x28>)
 8000162:	f043 0301 	orr.w	r3, r3, #1
 8000166:	6013      	str	r3, [r2, #0]
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	e000edfc 	.word	0xe000edfc
 8000174:	e0001000 	.word	0xe0001000

08000178 <delay_micros>:

void delay_micros(uint32_t us)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <delay_micros+0x3c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0c      	ldr	r2, [pc, #48]	; (80001b8 <delay_micros+0x40>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	0c9a      	lsrs	r2, r3, #18
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	fb02 f303 	mul.w	r3, r2, r3
 8000192:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000194:	4b09      	ldr	r3, [pc, #36]	; (80001bc <delay_micros+0x44>)
 8000196:	2200      	movs	r2, #0
 8000198:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 800019a:	bf00      	nop
 800019c:	4b07      	ldr	r3, [pc, #28]	; (80001bc <delay_micros+0x44>)
 800019e:	685b      	ldr	r3, [r3, #4]
 80001a0:	68fa      	ldr	r2, [r7, #12]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d8fa      	bhi.n	800019c <delay_micros+0x24>
}
 80001a6:	bf00      	nop
 80001a8:	bf00      	nop
 80001aa:	3714      	adds	r7, #20
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000000 	.word	0x20000000
 80001b8:	431bde83 	.word	0x431bde83
 80001bc:	e0001000 	.word	0xe0001000

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c6:	f000 fc23 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ca:	f000 f817 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ce:	f000 f8b3 	bl	8000338 <MX_GPIO_Init>
  MX_RTC_Init();
 80001d2:	f000 f867 	bl	80002a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 80001d6:	f7ff ffb9 	bl	800014c <DWT_Init>
  TM1637_SetBrightness(7);
 80001da:	2007      	movs	r0, #7
 80001dc:	f000 fb78 	bl	80008d0 <TM1637_SetBrightness>
  TM1637_ClearDisplay();
 80001e0:	f000 fb61 	bl	80008a6 <TM1637_ClearDisplay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  _Bool p;
  int8_t arr[]= {1,2,3,4};
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <main+0x38>)
 80001e6:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  TM1637_RunningString(arr, 4, 200);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	22c8      	movs	r2, #200	; 0xc8
 80001ec:	2104      	movs	r1, #4
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 fab2 	bl	8000758 <TM1637_RunningString>
 80001f4:	e7f8      	b.n	80001e8 <main+0x28>
 80001f6:	bf00      	nop
 80001f8:	04030201 	.word	0x04030201

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b094      	sub	sp, #80	; 0x50
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f002 f876 	bl	80022fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800022c:	2306      	movs	r3, #6
 800022e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000230:	2301      	movs	r3, #1
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000238:	2310      	movs	r3, #16
 800023a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800023c:	2300      	movs	r3, #0
 800023e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000244:	4618      	mov	r0, r3
 8000246:	f000 ff0d 	bl	8001064 <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000250:	f000 f8bc 	bl	80003cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000258:	2300      	movs	r3, #0
 800025a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 f978 	bl	8001564 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800027a:	f000 f8a7 	bl	80003cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800027e:	2301      	movs	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000286:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fb0a 	bl	80018a4 <HAL_RCCEx_PeriphCLKConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000296:	f000 f899 	bl	80003cc <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3750      	adds	r7, #80	; 0x50
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2100      	movs	r1, #0
 80002ae:	460a      	mov	r2, r1
 80002b0:	801a      	strh	r2, [r3, #0]
 80002b2:	460a      	mov	r2, r1
 80002b4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80002b6:	2300      	movs	r3, #0
 80002b8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <MX_RTC_Init+0x8c>)
 80002bc:	4a1d      	ldr	r2, [pc, #116]	; (8000334 <MX_RTC_Init+0x90>)
 80002be:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <MX_RTC_Init+0x8c>)
 80002c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <MX_RTC_Init+0x8c>)
 80002ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ce:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002d0:	4817      	ldr	r0, [pc, #92]	; (8000330 <MX_RTC_Init+0x8c>)
 80002d2:	f001 fc61 	bl	8001b98 <HAL_RTC_Init>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80002dc:	f000 f876 	bl	80003cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 80002e0:	2303      	movs	r3, #3
 80002e2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x57;
 80002e4:	2357      	movs	r3, #87	; 0x57
 80002e6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	480f      	ldr	r0, [pc, #60]	; (8000330 <MX_RTC_Init+0x8c>)
 80002f4:	f001 fce6 	bl	8001cc4 <HAL_RTC_SetTime>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80002fe:	f000 f865 	bl	80003cc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000302:	2301      	movs	r3, #1
 8000304:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000306:	2301      	movs	r3, #1
 8000308:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800030a:	2301      	movs	r3, #1
 800030c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800030e:	2300      	movs	r3, #0
 8000310:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000312:	463b      	mov	r3, r7
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_RTC_Init+0x8c>)
 800031a:	f001 fd6b 	bl	8001df4 <HAL_RTC_SetDate>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000324:	f000 f852 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	2000003c 	.word	0x2000003c
 8000334:	40002800 	.word	0x40002800

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <MX_GPIO_Init+0x8c>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a1c      	ldr	r2, [pc, #112]	; (80003c4 <MX_GPIO_Init+0x8c>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_GPIO_Init+0x8c>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <MX_GPIO_Init+0x8c>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <MX_GPIO_Init+0x8c>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_GPIO_Init+0x8c>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_GPIO_Init+0x8c>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <MX_GPIO_Init+0x8c>)
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_GPIO_Init+0x8c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0308 	and.w	r3, r3, #8
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO_PIN|CLK_PIN, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	21c0      	movs	r1, #192	; 0xc0
 8000398:	480b      	ldr	r0, [pc, #44]	; (80003c8 <MX_GPIO_Init+0x90>)
 800039a:	f000 fe3e 	bl	800101a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIO_PIN CLK_PIN */
  GPIO_InitStruct.Pin = DIO_PIN|CLK_PIN;
 800039e:	23c0      	movs	r3, #192	; 0xc0
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003aa:	2302      	movs	r3, #2
 80003ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	4619      	mov	r1, r3
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <MX_GPIO_Init+0x90>)
 80003b6:	f000 fc95 	bl	8000ce4 <HAL_GPIO_Init>

}
 80003ba:	bf00      	nop
 80003bc:	3720      	adds	r7, #32
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010c00 	.word	0x40010c00

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a14      	ldr	r2, [pc, #80]	; (8000434 <HAL_MspInit+0x5c>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <HAL_MspInit+0x5c>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_MspInit+0x60>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_MspInit+0x60>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000
 8000438:	40010000 	.word	0x40010000

0800043c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <HAL_RTC_MspInit+0x3c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d110      	bne.n	8000470 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800044e:	f000 fdfd 	bl	800104c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_RTC_MspInit+0x40>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a09      	ldr	r2, [pc, #36]	; (800047c <HAL_RTC_MspInit+0x40>)
 8000458:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b07      	ldr	r3, [pc, #28]	; (800047c <HAL_RTC_MspInit+0x40>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <HAL_RTC_MspInit+0x44>)
 800046c:	2201      	movs	r2, #1
 800046e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40002800 	.word	0x40002800
 800047c:	40021000 	.word	0x40021000
 8000480:	4242043c 	.word	0x4242043c

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000488:	f001 f9d4 	bl	8001834 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800048c:	e7fe      	b.n	800048c <NMI_Handler+0x8>

0800048e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <MemManage_Handler+0x4>

0800049a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr

080004ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ce:	f000 fae5 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
	...

080004e4 <writeByte>:
uint8_t BlankingFlag = 1;

static int8_t TubeTab[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x40}; //0~9, A(10), b(11), -(12)

void writeByte(int8_t wr_data)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]

  for(uint8_t i = 0; i < 8; i++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	73bb      	strb	r3, [r7, #14]
 80004f6:	e029      	b.n	800054c <writeByte+0x68>
  {
	  HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2140      	movs	r1, #64	; 0x40
 80004fc:	482e      	ldr	r0, [pc, #184]	; (80005b8 <writeByte+0xd4>)
 80004fe:	f000 fd8c 	bl	800101a <HAL_GPIO_WritePin>

    if(wr_data & 0x01)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d005      	beq.n	8000518 <writeByte+0x34>
    {
    	HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	4829      	ldr	r0, [pc, #164]	; (80005b8 <writeByte+0xd4>)
 8000512:	f000 fd82 	bl	800101a <HAL_GPIO_WritePin>
 8000516:	e004      	b.n	8000522 <writeByte+0x3e>
    }
    else
    	HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	4826      	ldr	r0, [pc, #152]	; (80005b8 <writeByte+0xd4>)
 800051e:	f000 fd7c 	bl	800101a <HAL_GPIO_WritePin>

    delay_micros(DELAY);
 8000522:	2005      	movs	r0, #5
 8000524:	f7ff fe28 	bl	8000178 <delay_micros>
    wr_data >>= 1;
 8000528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052c:	105b      	asrs	r3, r3, #1
 800052e:	71fb      	strb	r3, [r7, #7]
    delay_micros(DELAY);
 8000530:	2005      	movs	r0, #5
 8000532:	f7ff fe21 	bl	8000178 <delay_micros>
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2140      	movs	r1, #64	; 0x40
 800053a:	481f      	ldr	r0, [pc, #124]	; (80005b8 <writeByte+0xd4>)
 800053c:	f000 fd6d 	bl	800101a <HAL_GPIO_WritePin>
    delay_micros(DELAY);
 8000540:	2005      	movs	r0, #5
 8000542:	f7ff fe19 	bl	8000178 <delay_micros>
  for(uint8_t i = 0; i < 8; i++)
 8000546:	7bbb      	ldrb	r3, [r7, #14]
 8000548:	3301      	adds	r3, #1
 800054a:	73bb      	strb	r3, [r7, #14]
 800054c:	7bbb      	ldrb	r3, [r7, #14]
 800054e:	2b07      	cmp	r3, #7
 8000550:	d9d2      	bls.n	80004f8 <writeByte+0x14>
  }

  HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <writeByte+0xd4>)
 8000558:	f000 fd5f 	bl	800101a <HAL_GPIO_WritePin>
  delay_micros(DELAY);
 800055c:	2005      	movs	r0, #5
 800055e:	f7ff fe0b 	bl	8000178 <delay_micros>
  HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);;
 8000562:	2201      	movs	r2, #1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	4814      	ldr	r0, [pc, #80]	; (80005b8 <writeByte+0xd4>)
 8000568:	f000 fd57 	bl	800101a <HAL_GPIO_WritePin>
  delay_micros(DELAY);
 800056c:	2005      	movs	r0, #5
 800056e:	f7ff fe03 	bl	8000178 <delay_micros>
  HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);;
 8000572:	2201      	movs	r2, #1
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <writeByte+0xd4>)
 8000578:	f000 fd4f 	bl	800101a <HAL_GPIO_WritePin>
  delay_micros(DELAY);
 800057c:	2005      	movs	r0, #5
 800057e:	f7ff fdfb 	bl	8000178 <delay_micros>

  while(HAL_GPIO_ReadPin(DIO_PORT, DIO_PIN))
 8000582:	e00c      	b.n	800059e <writeByte+0xba>
  {
    count += 1;
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	3301      	adds	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]

    if(count == 200)
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	2bc8      	cmp	r3, #200	; 0xc8
 800058e:	d106      	bne.n	800059e <writeByte+0xba>
    {
    	HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);;
 8000590:	2200      	movs	r2, #0
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <writeByte+0xd4>)
 8000596:	f000 fd40 	bl	800101a <HAL_GPIO_WritePin>
    	count = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]
  while(HAL_GPIO_ReadPin(DIO_PORT, DIO_PIN))
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <writeByte+0xd4>)
 80005a2:	f000 fd23 	bl	8000fec <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1eb      	bne.n	8000584 <writeByte+0xa0>
    }
  }
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40010c00 	.word	0x40010c00

080005bc <start>:

void start(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <start+0x44>)
 80005c6:	f000 fd28 	bl	800101a <HAL_GPIO_WritePin>
	delay_micros(DELAY);
 80005ca:	2005      	movs	r0, #5
 80005cc:	f7ff fdd4 	bl	8000178 <delay_micros>
	HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <start+0x44>)
 80005d6:	f000 fd20 	bl	800101a <HAL_GPIO_WritePin>
	delay_micros(DELAY);
 80005da:	2005      	movs	r0, #5
 80005dc:	f7ff fdcc 	bl	8000178 <delay_micros>
	HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <start+0x44>)
 80005e6:	f000 fd18 	bl	800101a <HAL_GPIO_WritePin>
	delay_micros(DELAY);
 80005ea:	2005      	movs	r0, #5
 80005ec:	f7ff fdc4 	bl	8000178 <delay_micros>
	HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <start+0x44>)
 80005f6:	f000 fd10 	bl	800101a <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40010c00 	.word	0x40010c00

08000604 <stop>:

void stop(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	480e      	ldr	r0, [pc, #56]	; (8000648 <stop+0x44>)
 800060e:	f000 fd04 	bl	800101a <HAL_GPIO_WritePin>
	delay_micros(DELAY);
 8000612:	2005      	movs	r0, #5
 8000614:	f7ff fdb0 	bl	8000178 <delay_micros>
	HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <stop+0x44>)
 800061e:	f000 fcfc 	bl	800101a <HAL_GPIO_WritePin>
	delay_micros(DELAY);
 8000622:	2005      	movs	r0, #5
 8000624:	f7ff fda8 	bl	8000178 <delay_micros>
	HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <stop+0x44>)
 800062e:	f000 fcf4 	bl	800101a <HAL_GPIO_WritePin>
	delay_micros(DELAY);
 8000632:	2005      	movs	r0, #5
 8000634:	f7ff fda0 	bl	8000178 <delay_micros>
	HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <stop+0x44>)
 800063e:	f000 fcec 	bl	800101a <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010c00 	.word	0x40010c00

0800064c <TM1637_DisplayMass>:

void TM1637_DisplayMass(int8_t DispData[])
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	int8_t SegData[4];

	for(uint8_t i = 0; i < 4; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	e00d      	b.n	8000676 <TM1637_DisplayMass+0x2a>
	{
		SegData[i] = DispData[i];
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	441a      	add	r2, r3
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	f992 2000 	ldrsb.w	r2, [r2]
 8000666:	f107 0110 	add.w	r1, r7, #16
 800066a:	440b      	add	r3, r1
 800066c:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i = 0; i < 4; i++)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3301      	adds	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d9ee      	bls.n	800065a <TM1637_DisplayMass+0xe>
	}

	coding_mass(SegData);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f937 	bl	80008f4 <coding_mass>

	start();
 8000686:	f7ff ff99 	bl	80005bc <start>
	writeByte(ADDR_AUTO);
 800068a:	2040      	movs	r0, #64	; 0x40
 800068c:	f7ff ff2a 	bl	80004e4 <writeByte>
	stop();
 8000690:	f7ff ffb8 	bl	8000604 <stop>

	start();
 8000694:	f7ff ff92 	bl	80005bc <start>
	writeByte(startADDR);
 8000698:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 800069c:	f7ff ff22 	bl	80004e4 <writeByte>
	for(uint8_t i = 0; i < 4; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	73bb      	strb	r3, [r7, #14]
 80006a4:	e00b      	b.n	80006be <TM1637_DisplayMass+0x72>
	{
		writeByte(SegData[i]);
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	f107 0210 	add.w	r2, r7, #16
 80006ac:	4413      	add	r3, r2
 80006ae:	f913 3c08 	ldrsb.w	r3, [r3, #-8]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff16 	bl	80004e4 <writeByte>
	for(uint8_t i = 0; i < 4; i++)
 80006b8:	7bbb      	ldrb	r3, [r7, #14]
 80006ba:	3301      	adds	r3, #1
 80006bc:	73bb      	strb	r3, [r7, #14]
 80006be:	7bbb      	ldrb	r3, [r7, #14]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d9f0      	bls.n	80006a6 <TM1637_DisplayMass+0x5a>
	}
	stop();
 80006c4:	f7ff ff9e 	bl	8000604 <stop>

	start();
 80006c8:	f7ff ff78 	bl	80005bc <start>
	writeByte(Cmd_DispCtrl);
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <TM1637_DisplayMass+0x98>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	b25b      	sxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff06 	bl	80004e4 <writeByte>
	stop();
 80006d8:	f7ff ff94 	bl	8000604 <stop>
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000038 	.word	0x20000038

080006e8 <TM1637_Display>:

void TM1637_Display(uint8_t BitAddr, int8_t DispData)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	int8_t SegData;

	SegData = coding(DispData);
 80006f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f937 	bl	8000970 <coding>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]
	start();
 8000706:	f7ff ff59 	bl	80005bc <start>
	writeByte(ADDR_FIXED);
 800070a:	2044      	movs	r0, #68	; 0x44
 800070c:	f7ff feea 	bl	80004e4 <writeByte>
	stop();
 8000710:	f7ff ff78 	bl	8000604 <stop>

	start();
 8000714:	f7ff ff52 	bl	80005bc <start>
	writeByte(BitAddr | startADDR);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800071e:	b2db      	uxtb	r3, r3
 8000720:	b25b      	sxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fede 	bl	80004e4 <writeByte>
	writeByte(SegData);
 8000728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fed9 	bl	80004e4 <writeByte>
	stop();
 8000732:	f7ff ff67 	bl	8000604 <stop>

	start();
 8000736:	f7ff ff41 	bl	80005bc <start>
	writeByte(Cmd_DispCtrl);
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <TM1637_Display+0x6c>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b25b      	sxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fecf 	bl	80004e4 <writeByte>
	stop();
 8000746:	f7ff ff5d 	bl	8000604 <stop>
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000038 	.word	0x20000038

08000758 <TM1637_RunningString>:
	}
	TM1637_DisplayMass(tempArr);
}

void TM1637_RunningString(int8_t DispData[], uint8_t amount, uint16_t delayMs)
{
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
 8000764:	4613      	mov	r3, r2
 8000766:	803b      	strh	r3, [r7, #0]
 8000768:	466b      	mov	r3, sp
 800076a:	461d      	mov	r5, r3
	  uint8_t segm_data[amount + 8];
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	f103 0408 	add.w	r4, r3, #8
 8000772:	1e63      	subs	r3, r4, #1
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4623      	mov	r3, r4
 8000778:	4618      	mov	r0, r3
 800077a:	f04f 0100 	mov.w	r1, #0
 800077e:	f04f 0200 	mov.w	r2, #0
 8000782:	f04f 0300 	mov.w	r3, #0
 8000786:	00cb      	lsls	r3, r1, #3
 8000788:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800078c:	00c2      	lsls	r2, r0, #3
 800078e:	4623      	mov	r3, r4
 8000790:	4618      	mov	r0, r3
 8000792:	f04f 0100 	mov.w	r1, #0
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	00cb      	lsls	r3, r1, #3
 80007a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80007a4:	00c2      	lsls	r2, r0, #3
 80007a6:	4623      	mov	r3, r4
 80007a8:	3307      	adds	r3, #7
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	ebad 0d03 	sub.w	sp, sp, r3
 80007b2:	466b      	mov	r3, sp
 80007b4:	3300      	adds	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]

	  for (uint8_t i = 0; i < 4; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	753b      	strb	r3, [r7, #20]
 80007bc:	e006      	b.n	80007cc <TM1637_RunningString+0x74>
	  {
	    segm_data[i] = CLEAR_SEG;
 80007be:	7d3b      	ldrb	r3, [r7, #20]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	217f      	movs	r1, #127	; 0x7f
 80007c4:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i = 0; i < 4; i++)
 80007c6:	7d3b      	ldrb	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	753b      	strb	r3, [r7, #20]
 80007cc:	7d3b      	ldrb	r3, [r7, #20]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d9f5      	bls.n	80007be <TM1637_RunningString+0x66>
	  }

	  for (uint8_t i = 0; i < amount; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	757b      	strb	r3, [r7, #21]
 80007d6:	e00c      	b.n	80007f2 <TM1637_RunningString+0x9a>
	  {
	    segm_data[i + 4] = DispData[i];
 80007d8:	7d7b      	ldrb	r3, [r7, #21]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	f993 2000 	ldrsb.w	r2, [r3]
 80007e2:	7d7b      	ldrb	r3, [r7, #21]
 80007e4:	3304      	adds	r3, #4
 80007e6:	b2d1      	uxtb	r1, r2
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i = 0; i < amount; i++)
 80007ec:	7d7b      	ldrb	r3, [r7, #21]
 80007ee:	3301      	adds	r3, #1
 80007f0:	757b      	strb	r3, [r7, #21]
 80007f2:	7d7a      	ldrb	r2, [r7, #21]
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3ee      	bcc.n	80007d8 <TM1637_RunningString+0x80>
	  }

	  for (uint8_t i = amount + 4; i < amount + 8; i++)
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	3304      	adds	r3, #4
 80007fe:	75bb      	strb	r3, [r7, #22]
 8000800:	e006      	b.n	8000810 <TM1637_RunningString+0xb8>
	  {
	    segm_data[i] = CLEAR_SEG;
 8000802:	7dbb      	ldrb	r3, [r7, #22]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	217f      	movs	r1, #127	; 0x7f
 8000808:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i = amount + 4; i < amount + 8; i++)
 800080a:	7dbb      	ldrb	r3, [r7, #22]
 800080c:	3301      	adds	r3, #1
 800080e:	75bb      	strb	r3, [r7, #22]
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	1dda      	adds	r2, r3, #7
 8000814:	7dbb      	ldrb	r3, [r7, #22]
 8000816:	429a      	cmp	r2, r3
 8000818:	daf3      	bge.n	8000802 <TM1637_RunningString+0xaa>
	  }

	  for (uint8_t i = 0; i <= amount + 4; i++)
 800081a:	2300      	movs	r3, #0
 800081c:	75fb      	strb	r3, [r7, #23]
 800081e:	e018      	b.n	8000852 <TM1637_RunningString+0xfa>
	  {
	    displayByteForString (segm_data[i], segm_data[i + 1], segm_data[i + 2], segm_data[i + 3]);
 8000820:	7dfb      	ldrb	r3, [r7, #23]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	5cd0      	ldrb	r0, [r2, r3]
 8000826:	7dfb      	ldrb	r3, [r7, #23]
 8000828:	3301      	adds	r3, #1
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	5cd1      	ldrb	r1, [r2, r3]
 800082e:	7dfb      	ldrb	r3, [r7, #23]
 8000830:	3302      	adds	r3, #2
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	5cd4      	ldrb	r4, [r2, r3]
 8000836:	7dfb      	ldrb	r3, [r7, #23]
 8000838:	3303      	adds	r3, #3
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	4622      	mov	r2, r4
 8000840:	f000 f811 	bl	8000866 <displayByteForString>
	    HAL_Delay(delayMs);
 8000844:	883b      	ldrh	r3, [r7, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f944 	bl	8000ad4 <HAL_Delay>
	  for (uint8_t i = 0; i <= amount + 4; i++)
 800084c:	7dfb      	ldrb	r3, [r7, #23]
 800084e:	3301      	adds	r3, #1
 8000850:	75fb      	strb	r3, [r7, #23]
 8000852:	7dfa      	ldrb	r2, [r7, #23]
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	3304      	adds	r3, #4
 8000858:	429a      	cmp	r2, r3
 800085a:	dde1      	ble.n	8000820 <TM1637_RunningString+0xc8>
 800085c:	46ad      	mov	sp, r5
	  }
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bdb0      	pop	{r4, r5, r7, pc}

08000866 <displayByteForString>:

void displayByteForString (uint8_t bit0, uint8_t bit1, uint8_t bit2, uint8_t bit3)
{
 8000866:	b590      	push	{r4, r7, lr}
 8000868:	b085      	sub	sp, #20
 800086a:	af00      	add	r7, sp, #0
 800086c:	4604      	mov	r4, r0
 800086e:	4608      	mov	r0, r1
 8000870:	4611      	mov	r1, r2
 8000872:	461a      	mov	r2, r3
 8000874:	4623      	mov	r3, r4
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4603      	mov	r3, r0
 800087a:	71bb      	strb	r3, [r7, #6]
 800087c:	460b      	mov	r3, r1
 800087e:	717b      	strb	r3, [r7, #5]
 8000880:	4613      	mov	r3, r2
 8000882:	713b      	strb	r3, [r7, #4]
	uint8_t dispArray[] = {bit0, bit1, bit2, bit3};
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	733b      	strb	r3, [r7, #12]
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	737b      	strb	r3, [r7, #13]
 800088c:	797b      	ldrb	r3, [r7, #5]
 800088e:	73bb      	strb	r3, [r7, #14]
 8000890:	793b      	ldrb	r3, [r7, #4]
 8000892:	73fb      	strb	r3, [r7, #15]
	TM1637_DisplayMass(dispArray);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fed7 	bl	800064c <TM1637_DisplayMass>
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd90      	pop	{r4, r7, pc}

080008a6 <TM1637_ClearDisplay>:

void TM1637_ClearDisplay(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
	TM1637_Display(0x00, CLEAR_SEG);
 80008aa:	217f      	movs	r1, #127	; 0x7f
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff ff1b 	bl	80006e8 <TM1637_Display>
	TM1637_Display(0x01, CLEAR_SEG);
 80008b2:	217f      	movs	r1, #127	; 0x7f
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff ff17 	bl	80006e8 <TM1637_Display>
	TM1637_Display(0x02, CLEAR_SEG);
 80008ba:	217f      	movs	r1, #127	; 0x7f
 80008bc:	2002      	movs	r0, #2
 80008be:	f7ff ff13 	bl	80006e8 <TM1637_Display>
	TM1637_Display(0x03, CLEAR_SEG);
 80008c2:	217f      	movs	r1, #127	; 0x7f
 80008c4:	2003      	movs	r0, #3
 80008c6:	f7ff ff0f 	bl	80006e8 <TM1637_Display>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <TM1637_SetBrightness>:

void TM1637_SetBrightness(uint8_t brightness)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	Cmd_DispCtrl = 0x88 + brightness;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	3b78      	subs	r3, #120	; 0x78
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <TM1637_SetBrightness+0x20>)
 80008e2:	701a      	strb	r2, [r3, #0]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000038 	.word	0x20000038

080008f4 <coding_mass>:
	else
		point_flag = 1;
}

void coding_mass(int8_t DispData[])
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	uint8_t PointData;

	if(point_flag == 1)
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <coding_mass+0x74>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d102      	bne.n	800090a <coding_mass+0x16>
	{
		PointData = DISP_CONTROL;
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	e001      	b.n	800090e <coding_mass+0x1a>
	}
	else
		PointData = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < 4; i++)
 800090e:	2300      	movs	r3, #0
 8000910:	73bb      	strb	r3, [r7, #14]
 8000912:	e020      	b.n	8000956 <coding_mass+0x62>
	{
		if(DispData[i] == CLEAR_SEG)
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	f993 3000 	ldrsb.w	r3, [r3]
 800091e:	2b7f      	cmp	r3, #127	; 0x7f
 8000920:	d105      	bne.n	800092e <coding_mass+0x3a>
		{
			DispData[i] = 0x00;
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	4413      	add	r3, r2
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e010      	b.n	8000950 <coding_mass+0x5c>
		}
		else
			DispData[i] = TubeTab[DispData[i]] + PointData;
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	4413      	add	r3, r2
 8000934:	f993 3000 	ldrsb.w	r3, [r3]
 8000938:	461a      	mov	r2, r3
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <coding_mass+0x78>)
 800093c:	569b      	ldrsb	r3, [r3, r2]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	4413      	add	r3, r2
 8000944:	b2d9      	uxtb	r1, r3
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	b24a      	sxtb	r2, r1
 800094e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000950:	7bbb      	ldrb	r3, [r7, #14]
 8000952:	3301      	adds	r3, #1
 8000954:	73bb      	strb	r3, [r7, #14]
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d9db      	bls.n	8000914 <coding_mass+0x20>
	}
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	20000039 	.word	0x20000039
 800096c:	20000004 	.word	0x20000004

08000970 <coding>:

int8_t coding(int8_t DispData)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
	uint8_t PointData;

	if(point_flag == 1)
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <coding+0x4c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d102      	bne.n	8000988 <coding+0x18>
	{
		PointData = DISP_CONTROL;
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e001      	b.n	800098c <coding+0x1c>
	}
	else
		PointData = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]

	if(DispData == CLEAR_SEG)
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	2b7f      	cmp	r3, #127	; 0x7f
 8000992:	d102      	bne.n	800099a <coding+0x2a>
	{
		DispData = 0x00 + PointData;
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	e008      	b.n	80009ac <coding+0x3c>
	}
	else
		DispData = TubeTab[DispData] + PointData;
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <coding+0x50>)
 80009a0:	56d3      	ldrsb	r3, [r2, r3]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4413      	add	r3, r2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	71fb      	strb	r3, [r7, #7]

	return DispData;
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000039 	.word	0x20000039
 80009c0:	20000004 	.word	0x20000004

080009c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	; (8000a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ea:	f7ff fd74 	bl	80004d6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f001 fc61 	bl	80022b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff fbe5 	bl	80001c0 <main>
  bx lr
 80009f6:	4770      	bx	lr
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a00:	08002364 	.word	0x08002364
  ldr r2, =_sbss
 8000a04:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a08:	20000054 	.word	0x20000054

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_Init+0x28>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_Init+0x28>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f92b 	bl	8000c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a26:	200f      	movs	r0, #15
 8000a28:	f000 f808 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2c:	f7ff fcd4 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x54>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x58>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f935 	bl	8000cca <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a78:	f000 f90b 	bl	8000c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000018 	.word	0x20000018
 8000a98:	20000014 	.word	0x20000014

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x20>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_IncTick+0x20>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000018 	.word	0x20000018
 8000abc:	20000050 	.word	0x20000050

08000ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <HAL_GetTick+0x10>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	20000050 	.word	0x20000050

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff fff0 	bl	8000ac0 <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffe0 	bl	8000ac0 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000018 	.word	0x20000018

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c48:	d301      	bcc.n	8000c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00f      	b.n	8000c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <SysTick_Config+0x40>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c56:	210f      	movs	r1, #15
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f7ff ff90 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SysTick_Config+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <SysTick_Config+0x40>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff49 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca4:	f7ff ff5e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff ff90 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff5f 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffb0 	bl	8000c38 <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b08b      	sub	sp, #44	; 0x2c
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf6:	e169      	b.n	8000fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f040 8158 	bne.w	8000fc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4a9a      	ldr	r2, [pc, #616]	; (8000f84 <HAL_GPIO_Init+0x2a0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d05e      	beq.n	8000dde <HAL_GPIO_Init+0xfa>
 8000d20:	4a98      	ldr	r2, [pc, #608]	; (8000f84 <HAL_GPIO_Init+0x2a0>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d875      	bhi.n	8000e12 <HAL_GPIO_Init+0x12e>
 8000d26:	4a98      	ldr	r2, [pc, #608]	; (8000f88 <HAL_GPIO_Init+0x2a4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d058      	beq.n	8000dde <HAL_GPIO_Init+0xfa>
 8000d2c:	4a96      	ldr	r2, [pc, #600]	; (8000f88 <HAL_GPIO_Init+0x2a4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d86f      	bhi.n	8000e12 <HAL_GPIO_Init+0x12e>
 8000d32:	4a96      	ldr	r2, [pc, #600]	; (8000f8c <HAL_GPIO_Init+0x2a8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d052      	beq.n	8000dde <HAL_GPIO_Init+0xfa>
 8000d38:	4a94      	ldr	r2, [pc, #592]	; (8000f8c <HAL_GPIO_Init+0x2a8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d869      	bhi.n	8000e12 <HAL_GPIO_Init+0x12e>
 8000d3e:	4a94      	ldr	r2, [pc, #592]	; (8000f90 <HAL_GPIO_Init+0x2ac>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d04c      	beq.n	8000dde <HAL_GPIO_Init+0xfa>
 8000d44:	4a92      	ldr	r2, [pc, #584]	; (8000f90 <HAL_GPIO_Init+0x2ac>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d863      	bhi.n	8000e12 <HAL_GPIO_Init+0x12e>
 8000d4a:	4a92      	ldr	r2, [pc, #584]	; (8000f94 <HAL_GPIO_Init+0x2b0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d046      	beq.n	8000dde <HAL_GPIO_Init+0xfa>
 8000d50:	4a90      	ldr	r2, [pc, #576]	; (8000f94 <HAL_GPIO_Init+0x2b0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d85d      	bhi.n	8000e12 <HAL_GPIO_Init+0x12e>
 8000d56:	2b12      	cmp	r3, #18
 8000d58:	d82a      	bhi.n	8000db0 <HAL_GPIO_Init+0xcc>
 8000d5a:	2b12      	cmp	r3, #18
 8000d5c:	d859      	bhi.n	8000e12 <HAL_GPIO_Init+0x12e>
 8000d5e:	a201      	add	r2, pc, #4	; (adr r2, 8000d64 <HAL_GPIO_Init+0x80>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000ddf 	.word	0x08000ddf
 8000d68:	08000db9 	.word	0x08000db9
 8000d6c:	08000dcb 	.word	0x08000dcb
 8000d70:	08000e0d 	.word	0x08000e0d
 8000d74:	08000e13 	.word	0x08000e13
 8000d78:	08000e13 	.word	0x08000e13
 8000d7c:	08000e13 	.word	0x08000e13
 8000d80:	08000e13 	.word	0x08000e13
 8000d84:	08000e13 	.word	0x08000e13
 8000d88:	08000e13 	.word	0x08000e13
 8000d8c:	08000e13 	.word	0x08000e13
 8000d90:	08000e13 	.word	0x08000e13
 8000d94:	08000e13 	.word	0x08000e13
 8000d98:	08000e13 	.word	0x08000e13
 8000d9c:	08000e13 	.word	0x08000e13
 8000da0:	08000e13 	.word	0x08000e13
 8000da4:	08000e13 	.word	0x08000e13
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000dd5 	.word	0x08000dd5
 8000db0:	4a79      	ldr	r2, [pc, #484]	; (8000f98 <HAL_GPIO_Init+0x2b4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000db6:	e02c      	b.n	8000e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	623b      	str	r3, [r7, #32]
          break;
 8000dbe:	e029      	b.n	8000e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	623b      	str	r3, [r7, #32]
          break;
 8000dc8:	e024      	b.n	8000e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	3308      	adds	r3, #8
 8000dd0:	623b      	str	r3, [r7, #32]
          break;
 8000dd2:	e01f      	b.n	8000e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	330c      	adds	r3, #12
 8000dda:	623b      	str	r3, [r7, #32]
          break;
 8000ddc:	e01a      	b.n	8000e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000de6:	2304      	movs	r3, #4
 8000de8:	623b      	str	r3, [r7, #32]
          break;
 8000dea:	e013      	b.n	8000e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d105      	bne.n	8000e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df4:	2308      	movs	r3, #8
 8000df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	611a      	str	r2, [r3, #16]
          break;
 8000dfe:	e009      	b.n	8000e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e00:	2308      	movs	r3, #8
 8000e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	615a      	str	r2, [r3, #20]
          break;
 8000e0a:	e003      	b.n	8000e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
          break;
 8000e10:	e000      	b.n	8000e14 <HAL_GPIO_Init+0x130>
          break;
 8000e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	2bff      	cmp	r3, #255	; 0xff
 8000e18:	d801      	bhi.n	8000e1e <HAL_GPIO_Init+0x13a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	e001      	b.n	8000e22 <HAL_GPIO_Init+0x13e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3304      	adds	r3, #4
 8000e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	2bff      	cmp	r3, #255	; 0xff
 8000e28:	d802      	bhi.n	8000e30 <HAL_GPIO_Init+0x14c>
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_Init+0x152>
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	3b08      	subs	r3, #8
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	401a      	ands	r2, r3
 8000e48:	6a39      	ldr	r1, [r7, #32]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	431a      	orrs	r2, r3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e64:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <HAL_GPIO_Init+0x2b8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e7c:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <HAL_GPIO_Init+0x2bc>)
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a40      	ldr	r2, [pc, #256]	; (8000fa4 <HAL_GPIO_Init+0x2c0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d013      	beq.n	8000ed0 <HAL_GPIO_Init+0x1ec>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a3f      	ldr	r2, [pc, #252]	; (8000fa8 <HAL_GPIO_Init+0x2c4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00d      	beq.n	8000ecc <HAL_GPIO_Init+0x1e8>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a3e      	ldr	r2, [pc, #248]	; (8000fac <HAL_GPIO_Init+0x2c8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0x1e4>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a3d      	ldr	r2, [pc, #244]	; (8000fb0 <HAL_GPIO_Init+0x2cc>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d101      	bne.n	8000ec4 <HAL_GPIO_Init+0x1e0>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x1ee>
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	e004      	b.n	8000ed2 <HAL_GPIO_Init+0x1ee>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	e002      	b.n	8000ed2 <HAL_GPIO_Init+0x1ee>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <HAL_GPIO_Init+0x1ee>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed4:	f002 0203 	and.w	r2, r2, #3
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	4093      	lsls	r3, r2
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ee2:	492f      	ldr	r1, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x2bc>)
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	492c      	ldr	r1, [pc, #176]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4928      	ldr	r1, [pc, #160]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4922      	ldr	r1, [pc, #136]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	491e      	ldr	r1, [pc, #120]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	4918      	ldr	r1, [pc, #96]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4914      	ldr	r1, [pc, #80]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d021      	beq.n	8000fb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60cb      	str	r3, [r1, #12]
 8000f80:	e021      	b.n	8000fc6 <HAL_GPIO_Init+0x2e2>
 8000f82:	bf00      	nop
 8000f84:	10320000 	.word	0x10320000
 8000f88:	10310000 	.word	0x10310000
 8000f8c:	10220000 	.word	0x10220000
 8000f90:	10210000 	.word	0x10210000
 8000f94:	10120000 	.word	0x10120000
 8000f98:	10110000 	.word	0x10110000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	40010c00 	.word	0x40010c00
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40011400 	.word	0x40011400
 8000fb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_GPIO_Init+0x304>)
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	4909      	ldr	r1, [pc, #36]	; (8000fe8 <HAL_GPIO_Init+0x304>)
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	3301      	adds	r3, #1
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f47f ae8e 	bne.w	8000cf8 <HAL_GPIO_Init+0x14>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	372c      	adds	r7, #44	; 0x2c
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e001      	b.n	800100e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]
 8001026:	4613      	mov	r3, r2
 8001028:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800102a:	787b      	ldrb	r3, [r7, #1]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001030:	887a      	ldrh	r2, [r7, #2]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001036:	e003      	b.n	8001040 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	041a      	lsls	r2, r3, #16
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	611a      	str	r2, [r3, #16]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
	...

0800104c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	420e0020 	.word	0x420e0020

08001064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e26c      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8087 	beq.w	8001192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001084:	4b92      	ldr	r3, [pc, #584]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b04      	cmp	r3, #4
 800108e:	d00c      	beq.n	80010aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001090:	4b8f      	ldr	r3, [pc, #572]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b08      	cmp	r3, #8
 800109a:	d112      	bne.n	80010c2 <HAL_RCC_OscConfig+0x5e>
 800109c:	4b8c      	ldr	r3, [pc, #560]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d10b      	bne.n	80010c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010aa:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d06c      	beq.n	8001190 <HAL_RCC_OscConfig+0x12c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d168      	bne.n	8001190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e246      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x76>
 80010cc:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a7f      	ldr	r2, [pc, #508]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e02e      	b.n	8001138 <HAL_RCC_OscConfig+0xd4>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x98>
 80010e2:	4b7b      	ldr	r3, [pc, #492]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a7a      	ldr	r2, [pc, #488]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b78      	ldr	r3, [pc, #480]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a77      	ldr	r2, [pc, #476]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e01d      	b.n	8001138 <HAL_RCC_OscConfig+0xd4>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0xbc>
 8001106:	4b72      	ldr	r3, [pc, #456]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a71      	ldr	r2, [pc, #452]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b6f      	ldr	r3, [pc, #444]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a6e      	ldr	r2, [pc, #440]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e00b      	b.n	8001138 <HAL_RCC_OscConfig+0xd4>
 8001120:	4b6b      	ldr	r3, [pc, #428]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a6a      	ldr	r2, [pc, #424]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a67      	ldr	r2, [pc, #412]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcbe 	bl	8000ac0 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fcba 	bl	8000ac0 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1fa      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0xe4>
 8001166:	e014      	b.n	8001192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcaa 	bl	8000ac0 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fca6 	bl	8000ac0 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1e6      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x10c>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d063      	beq.n	8001266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800119e:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d11c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x18c>
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d116      	bne.n	80011f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_RCC_OscConfig+0x176>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e1ba      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4939      	ldr	r1, [pc, #228]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	e03a      	b.n	8001266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <HAL_RCC_OscConfig+0x270>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fc5f 	bl	8000ac0 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fc5b 	bl	8000ac0 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e19b      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4927      	ldr	r1, [pc, #156]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
 8001238:	e015      	b.n	8001266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_RCC_OscConfig+0x270>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fc3e 	bl	8000ac0 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fc3a 	bl	8000ac0 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e17a      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03a      	beq.n	80012e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d019      	beq.n	80012ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_RCC_OscConfig+0x274>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff fc1e 	bl	8000ac0 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fc1a 	bl	8000ac0 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e15a      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 fad8 	bl	800185c <RCC_Delay>
 80012ac:	e01c      	b.n	80012e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_RCC_OscConfig+0x274>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fc04 	bl	8000ac0 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ba:	e00f      	b.n	80012dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc00 	bl	8000ac0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d908      	bls.n	80012dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e140      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	42420000 	.word	0x42420000
 80012d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	4b9e      	ldr	r3, [pc, #632]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e9      	bne.n	80012bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80a6 	beq.w	8001442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fa:	4b97      	ldr	r3, [pc, #604]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b94      	ldr	r3, [pc, #592]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a93      	ldr	r2, [pc, #588]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b91      	ldr	r3, [pc, #580]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b8e      	ldr	r3, [pc, #568]	; (800155c <HAL_RCC_OscConfig+0x4f8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132e:	4b8b      	ldr	r3, [pc, #556]	; (800155c <HAL_RCC_OscConfig+0x4f8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a8a      	ldr	r2, [pc, #552]	; (800155c <HAL_RCC_OscConfig+0x4f8>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133a:	f7ff fbc1 	bl	8000ac0 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001342:	f7ff fbbd 	bl	8000ac0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0fd      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4b81      	ldr	r3, [pc, #516]	; (800155c <HAL_RCC_OscConfig+0x4f8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x312>
 8001368:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a7a      	ldr	r2, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	e02d      	b.n	80013d2 <HAL_RCC_OscConfig+0x36e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x334>
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a75      	ldr	r2, [pc, #468]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	4b73      	ldr	r3, [pc, #460]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a72      	ldr	r2, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	6213      	str	r3, [r2, #32]
 8001396:	e01c      	b.n	80013d2 <HAL_RCC_OscConfig+0x36e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b05      	cmp	r3, #5
 800139e:	d10c      	bne.n	80013ba <HAL_RCC_OscConfig+0x356>
 80013a0:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a6c      	ldr	r2, [pc, #432]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a69      	ldr	r2, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	e00b      	b.n	80013d2 <HAL_RCC_OscConfig+0x36e>
 80013ba:	4b67      	ldr	r3, [pc, #412]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a66      	ldr	r2, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6213      	str	r3, [r2, #32]
 80013c6:	4b64      	ldr	r3, [pc, #400]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a63      	ldr	r2, [pc, #396]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d015      	beq.n	8001406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fb71 	bl	8000ac0 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e0:	e00a      	b.n	80013f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7ff fb6d 	bl	8000ac0 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e0ab      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f8:	4b57      	ldr	r3, [pc, #348]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ee      	beq.n	80013e2 <HAL_RCC_OscConfig+0x37e>
 8001404:	e014      	b.n	8001430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb5b 	bl	8000ac0 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f7ff fb57 	bl	8000ac0 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e095      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ee      	bne.n	800140e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d105      	bne.n	8001442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001436:	4b48      	ldr	r3, [pc, #288]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a47      	ldr	r2, [pc, #284]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8081 	beq.w	800154e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144c:	4b42      	ldr	r3, [pc, #264]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	2b08      	cmp	r3, #8
 8001456:	d061      	beq.n	800151c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d146      	bne.n	80014ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001460:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_RCC_OscConfig+0x4fc>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fb2b 	bl	8000ac0 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff fb27 	bl	8000ac0 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e067      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d108      	bne.n	80014a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	492d      	ldr	r1, [pc, #180]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a19      	ldr	r1, [r3, #32]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	430b      	orrs	r3, r1
 80014ba:	4927      	ldr	r1, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x4fc>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fafb 	bl	8000ac0 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff faf7 	bl	8000ac0 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e037      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x46a>
 80014ec:	e02f      	b.n	800154e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_RCC_OscConfig+0x4fc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fae4 	bl	8000ac0 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff fae0 	bl	8000ac0 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e020      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x498>
 800151a:	e018      	b.n	800154e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e013      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	429a      	cmp	r2, r3
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	40007000 	.word	0x40007000
 8001560:	42420060 	.word	0x42420060

08001564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0d0      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b6a      	ldr	r3, [pc, #424]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d910      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b67      	ldr	r3, [pc, #412]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 0207 	bic.w	r2, r3, #7
 800158e:	4965      	ldr	r1, [pc, #404]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b63      	ldr	r3, [pc, #396]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0b8      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d020      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a58      	ldr	r2, [pc, #352]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d8:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	494d      	ldr	r1, [pc, #308]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d040      	beq.n	8001684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d115      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e07f      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e073      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e06b      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001642:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f023 0203 	bic.w	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4936      	ldr	r1, [pc, #216]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff fa34 	bl	8000ac0 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	e00a      	b.n	8001672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165c:	f7ff fa30 	bl	8000ac0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e053      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 020c 	and.w	r2, r3, #12
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	429a      	cmp	r2, r3
 8001682:	d1eb      	bne.n	800165c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d210      	bcs.n	80016b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 0207 	bic.w	r2, r3, #7
 800169a:	4922      	ldr	r1, [pc, #136]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e032      	b.n	800171a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4916      	ldr	r1, [pc, #88]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	490e      	ldr	r1, [pc, #56]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016f2:	f000 f821 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016f6:	4602      	mov	r2, r0
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	490a      	ldr	r1, [pc, #40]	; (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	5ccb      	ldrb	r3, [r1, r3]
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x1cc>)
 800170c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1d0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f992 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000
 8001728:	40021000 	.word	0x40021000
 800172c:	08002344 	.word	0x08002344
 8001730:	20000000 	.word	0x20000000
 8001734:	20000014 	.word	0x20000014

08001738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b490      	push	{r4, r7}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001740:	1d3c      	adds	r4, r7, #4
 8001742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001748:	f240 2301 	movw	r3, #513	; 0x201
 800174c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b04      	cmp	r3, #4
 8001770:	d002      	beq.n	8001778 <HAL_RCC_GetSysClockFreq+0x40>
 8001772:	2b08      	cmp	r3, #8
 8001774:	d003      	beq.n	800177e <HAL_RCC_GetSysClockFreq+0x46>
 8001776:	e02d      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800177a:	623b      	str	r3, [r7, #32]
      break;
 800177c:	e02d      	b.n	80017da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	0c9b      	lsrs	r3, r3, #18
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800178a:	4413      	add	r3, r2
 800178c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001790:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	0c5b      	lsrs	r3, r3, #17
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017aa:	4413      	add	r3, r2
 80017ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017b6:	fb02 f203 	mul.w	r2, r2, r3
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
 80017c2:	e004      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	623b      	str	r3, [r7, #32]
      break;
 80017d2:	e002      	b.n	80017da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d6:	623b      	str	r3, [r7, #32]
      break;
 80017d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017da:	6a3b      	ldr	r3, [r7, #32]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc90      	pop	{r4, r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	08002324 	.word	0x08002324
 80017ec:	40021000 	.word	0x40021000
 80017f0:	007a1200 	.word	0x007a1200
 80017f4:	003d0900 	.word	0x003d0900

080017f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001810:	f7ff fff2 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	0adb      	lsrs	r3, r3, #11
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	; (8001830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	08002354 	.word	0x08002354

08001834 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_RCC_NMI_IRQHandler+0x20>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001840:	2b80      	cmp	r3, #128	; 0x80
 8001842:	d104      	bne.n	800184e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001844:	f000 f828 	bl	8001898 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_NMI_IRQHandler+0x24>)
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	701a      	strb	r2, [r3, #0]
  }
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	4002100a 	.word	0x4002100a

0800185c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <RCC_Delay+0x34>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <RCC_Delay+0x38>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0a5b      	lsrs	r3, r3, #9
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001878:	bf00      	nop
  }
  while (Delay --);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1e5a      	subs	r2, r3, #1
 800187e:	60fa      	str	r2, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f9      	bne.n	8001878 <RCC_Delay+0x1c>
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	20000000 	.word	0x20000000
 8001894:	10624dd3 	.word	0x10624dd3

08001898 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d07d      	beq.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c4:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10d      	bne.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4a4b      	ldr	r2, [pc, #300]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018da:	61d3      	str	r3, [r2, #28]
 80018dc:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e8:	2301      	movs	r3, #1
 80018ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d118      	bne.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a42      	ldr	r2, [pc, #264]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001902:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001904:	f7ff f8dc 	bl	8000ac0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	e008      	b.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190c:	f7ff f8d8 	bl	8000ac0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e06d      	b.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800192a:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001932:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d02e      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d027      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001948:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001950:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001958:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800195e:	4a29      	ldr	r2, [pc, #164]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d014      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff f8a7 	bl	8000ac0 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7ff f8a3 	bl	8000ac0 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e036      	b.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ee      	beq.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4917      	ldr	r1, [pc, #92]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	490b      	ldr	r1, [pc, #44]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d008      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	4904      	ldr	r1, [pc, #16]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	42420440 	.word	0x42420440

08001a10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b08d      	sub	sp, #52	; 0x34
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a18:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001a1a:	f107 040c 	add.w	r4, r7, #12
 8001a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a24:	f240 2301 	movw	r3, #513	; 0x201
 8001a28:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d00a      	beq.n	8001a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	f200 8091 	bhi.w	8001b6e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d04c      	beq.n	8001aec <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d07c      	beq.n	8001b52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001a58:	e089      	b.n	8001b6e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001a5a:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001a60:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8082 	beq.w	8001b72 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	0c9b      	lsrs	r3, r3, #18
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a80:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d018      	beq.n	8001abe <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0c5b      	lsrs	r3, r3, #17
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001aac:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001abc:	e004      	b.n	8001ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad4:	d102      	bne.n	8001adc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ada:	e04a      	b.n	8001b72 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4a2c      	ldr	r2, [pc, #176]	; (8001b94 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	085b      	lsrs	r3, r3, #1
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001aea:	e042      	b.n	8001b72 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001afc:	d108      	bne.n	8001b10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0e:	e01f      	b.n	8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1a:	d109      	bne.n	8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001b28:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b2e:	e00f      	b.n	8001b50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b3a:	d11c      	bne.n	8001b76 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d016      	beq.n	8001b76 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001b48:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b4e:	e012      	b.n	8001b76 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001b50:	e011      	b.n	8001b76 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001b52:	f7ff fe5b 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	0b9b      	lsrs	r3, r3, #14
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	3301      	adds	r3, #1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b6c:	e004      	b.n	8001b78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001b6e:	bf00      	nop
 8001b70:	e002      	b.n	8001b78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001b72:	bf00      	nop
 8001b74:	e000      	b.n	8001b78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001b76:	bf00      	nop
    }
  }
  return (frequency);
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3734      	adds	r7, #52	; 0x34
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	08002334 	.word	0x08002334
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	007a1200 	.word	0x007a1200
 8001b90:	003d0900 	.word	0x003d0900
 8001b94:	aaaaaaab 	.word	0xaaaaaaab

08001b98 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e084      	b.n	8001cb8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7c5b      	ldrb	r3, [r3, #17]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fc3c 	bl	800043c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f9c8 	bl	8001f60 <HAL_RTC_WaitForSynchro>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e06b      	b.n	8001cb8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fa81 	bl	80020e8 <RTC_EnterInitMode>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2204      	movs	r2, #4
 8001bf0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e060      	b.n	8001cb8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0207 	bic.w	r2, r2, #7
 8001c04:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_RTC_Init+0x128>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <HAL_RTC_Init+0x128>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RTC_Init+0x128>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4926      	ldr	r1, [pc, #152]	; (8001cc0 <HAL_RTC_Init+0x128>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c34:	d003      	beq.n	8001c3e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e00e      	b.n	8001c5c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f7ff fee6 	bl	8001a10 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c44:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e030      	b.n	8001cb8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 010f 	bic.w	r1, r3, #15
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0c1a      	lsrs	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0c1b      	lsrs	r3, r3, #16
 8001c7a:	041b      	lsls	r3, r3, #16
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	b291      	uxth	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fa55 	bl	8002138 <RTC_ExitInitMode>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00c      	b.n	8001cb8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
  }
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40006c00 	.word	0x40006c00

08001cc4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RTC_SetTime+0x20>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e080      	b.n	8001dea <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	7c1b      	ldrb	r3, [r3, #16]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_RTC_SetTime+0x30>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e07a      	b.n	8001dea <HAL_RTC_SetTime+0x126>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d113      	bne.n	8001d2e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d10:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	785b      	ldrb	r3, [r3, #1]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	1a5b      	subs	r3, r3, r1
 8001d20:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d22:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001d28:	4413      	add	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e01e      	b.n	8001d6c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fa28 	bl	8002188 <RTC_Bcd2ToByte>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d40:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	785b      	ldrb	r3, [r3, #1]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fa1d 	bl	8002188 <RTC_Bcd2ToByte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d5a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	789b      	ldrb	r3, [r3, #2]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fa11 	bl	8002188 <RTC_Bcd2ToByte>
 8001d66:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d68:	4423      	add	r3, r4
 8001d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001d6c:	6979      	ldr	r1, [r7, #20]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f953 	bl	800201a <RTC_WriteTimeCounter>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e02f      	b.n	8001dea <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0205 	bic.w	r2, r2, #5
 8001d98:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f964 	bl	8002068 <RTC_ReadAlarmCounter>
 8001da0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da8:	d018      	beq.n	8001ddc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d214      	bcs.n	8001ddc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001db8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dbc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001dbe:	6939      	ldr	r1, [r7, #16]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f96a 	bl	800209a <RTC_WriteAlarmCounter>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e006      	b.n	8001dea <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001de8:	2300      	movs	r3, #0
  }
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd90      	pop	{r4, r7, pc}
	...

08001df4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_RTC_SetDate+0x24>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e097      	b.n	8001f4c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	7c1b      	ldrb	r3, [r3, #16]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_RTC_SetDate+0x34>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e091      	b.n	8001f4c <HAL_RTC_SetDate+0x158>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2202      	movs	r2, #2
 8001e32:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	78da      	ldrb	r2, [r3, #3]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	785a      	ldrb	r2, [r3, #1]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	789a      	ldrb	r2, [r3, #2]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	739a      	strb	r2, [r3, #14]
 8001e52:	e01a      	b.n	8001e8a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	78db      	ldrb	r3, [r3, #3]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f995 	bl	8002188 <RTC_Bcd2ToByte>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f98c 	bl	8002188 <RTC_Bcd2ToByte>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	789b      	ldrb	r3, [r3, #2]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 f983 	bl	8002188 <RTC_Bcd2ToByte>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	7bdb      	ldrb	r3, [r3, #15]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	7b59      	ldrb	r1, [r3, #13]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	7b9b      	ldrb	r3, [r3, #14]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f000 f993 	bl	80021c4 <RTC_WeekDayNum>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	7b1a      	ldrb	r2, [r3, #12]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f883 	bl	8001fba <RTC_ReadTimeCounter>
 8001eb4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_RTC_SetDate+0x160>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0adb      	lsrs	r3, r3, #11
 8001ec0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b18      	cmp	r3, #24
 8001ec6:	d93a      	bls.n	8001f3e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <HAL_RTC_SetDate+0x164>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_RTC_SetDate+0x168>)
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ede:	69f9      	ldr	r1, [r7, #28]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f89a 	bl	800201a <RTC_WriteTimeCounter>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e027      	b.n	8001f4c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f8b3 	bl	8002068 <RTC_ReadAlarmCounter>
 8001f02:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f0a:	d018      	beq.n	8001f3e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d214      	bcs.n	8001f3e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001f1a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f1e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001f20:	69b9      	ldr	r1, [r7, #24]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f8b9 	bl	800209a <RTC_WriteAlarmCounter>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2204      	movs	r2, #4
 8001f32:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e006      	b.n	8001f4c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	91a2b3c5 	.word	0x91a2b3c5
 8001f58:	aaaaaaab 	.word	0xaaaaaaab
 8001f5c:	00015180 	.word	0x00015180

08001f60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e01d      	b.n	8001fb2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0208 	bic.w	r2, r2, #8
 8001f84:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001f86:	f7fe fd9b 	bl	8000ac0 <HAL_GetTick>
 8001f8a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f8c:	e009      	b.n	8001fa2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f8e:	f7fe fd97 	bl	8000ac0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e007      	b.n	8001fb2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ee      	beq.n	8001f8e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b087      	sub	sp, #28
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	827b      	strh	r3, [r7, #18]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	823b      	strh	r3, [r7, #16]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001fea:	8a7a      	ldrh	r2, [r7, #18]
 8001fec:	8a3b      	ldrh	r3, [r7, #16]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d008      	beq.n	8002004 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001ff2:	8a3b      	ldrh	r3, [r7, #16]
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e004      	b.n	800200e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002004:	8a7b      	ldrh	r3, [r7, #18]
 8002006:	041a      	lsls	r2, r3, #16
 8002008:	89fb      	ldrh	r3, [r7, #14]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800200e:	697b      	ldr	r3, [r7, #20]
}
 8002010:	4618      	mov	r0, r3
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f85d 	bl	80020e8 <RTC_EnterInitMode>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e011      	b.n	800205e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	0c12      	lsrs	r2, r2, #16
 8002042:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	b292      	uxth	r2, r2
 800204c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f872 	bl	8002138 <RTC_ExitInitMode>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	81fb      	strh	r3, [r7, #14]
 8002074:	2300      	movs	r3, #0
 8002076:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002088:	89fb      	ldrh	r3, [r7, #14]
 800208a:	041a      	lsls	r2, r3, #16
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f81d 	bl	80020e8 <RTC_EnterInitMode>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e011      	b.n	80020de <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	0c12      	lsrs	r2, r2, #16
 80020c2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	b292      	uxth	r2, r2
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f832 	bl	8002138 <RTC_ExitInitMode>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80020f4:	f7fe fce4 	bl	8000ac0 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020fa:	e009      	b.n	8002110 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020fc:	f7fe fce0 	bl	8000ac0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800210a:	d901      	bls.n	8002110 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e00f      	b.n	8002130 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0ee      	beq.n	80020fc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0210 	orr.w	r2, r2, #16
 800212c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0210 	bic.w	r2, r2, #16
 8002152:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002154:	f7fe fcb4 	bl	8000ac0 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800215a:	e009      	b.n	8002170 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800215c:	f7fe fcb0 	bl	8000ac0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800216a:	d901      	bls.n	8002170 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e007      	b.n	8002180 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0ee      	beq.n	800215c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	b2db      	uxtb	r3, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
	...

080021c4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
 80021d0:	4613      	mov	r3, r2
 80021d2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80021e2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d82d      	bhi.n	8002246 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <RTC_WeekDayNum+0xe4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	085a      	lsrs	r2, r3, #1
 80021fe:	78bb      	ldrb	r3, [r7, #2]
 8002200:	441a      	add	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	441a      	add	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	441a      	add	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3b01      	subs	r3, #1
 8002212:	4926      	ldr	r1, [pc, #152]	; (80022ac <RTC_WeekDayNum+0xe8>)
 8002214:	fba1 1303 	umull	r1, r3, r1, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	1ad2      	subs	r2, r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	3b01      	subs	r3, #1
 8002220:	4922      	ldr	r1, [pc, #136]	; (80022ac <RTC_WeekDayNum+0xe8>)
 8002222:	fba1 1303 	umull	r1, r3, r1, r3
 8002226:	09db      	lsrs	r3, r3, #7
 8002228:	4413      	add	r3, r2
 800222a:	1d1a      	adds	r2, r3, #4
 800222c:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <RTC_WeekDayNum+0xec>)
 800222e:	fba3 1302 	umull	r1, r3, r3, r2
 8002232:	1ad1      	subs	r1, r2, r3
 8002234:	0849      	lsrs	r1, r1, #1
 8002236:	440b      	add	r3, r1
 8002238:	0899      	lsrs	r1, r3, #2
 800223a:	460b      	mov	r3, r1
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a5b      	subs	r3, r3, r1
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e029      	b.n	800229a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <RTC_WeekDayNum+0xe4>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	085a      	lsrs	r2, r3, #1
 800225a:	78bb      	ldrb	r3, [r7, #2]
 800225c:	441a      	add	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	441a      	add	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	441a      	add	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4910      	ldr	r1, [pc, #64]	; (80022ac <RTC_WeekDayNum+0xe8>)
 800226c:	fba1 1303 	umull	r1, r3, r1, r3
 8002270:	095b      	lsrs	r3, r3, #5
 8002272:	1ad2      	subs	r2, r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	490d      	ldr	r1, [pc, #52]	; (80022ac <RTC_WeekDayNum+0xe8>)
 8002278:	fba1 1303 	umull	r1, r3, r1, r3
 800227c:	09db      	lsrs	r3, r3, #7
 800227e:	4413      	add	r3, r2
 8002280:	1c9a      	adds	r2, r3, #2
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <RTC_WeekDayNum+0xec>)
 8002284:	fba3 1302 	umull	r1, r3, r3, r2
 8002288:	1ad1      	subs	r1, r2, r3
 800228a:	0849      	lsrs	r1, r1, #1
 800228c:	440b      	add	r3, r1
 800228e:	0899      	lsrs	r1, r3, #2
 8002290:	460b      	mov	r3, r1
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	1a5b      	subs	r3, r3, r1
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	b2db      	uxtb	r3, r3
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	38e38e39 	.word	0x38e38e39
 80022ac:	51eb851f 	.word	0x51eb851f
 80022b0:	24924925 	.word	0x24924925

080022b4 <__libc_init_array>:
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	2600      	movs	r6, #0
 80022b8:	4d0c      	ldr	r5, [pc, #48]	; (80022ec <__libc_init_array+0x38>)
 80022ba:	4c0d      	ldr	r4, [pc, #52]	; (80022f0 <__libc_init_array+0x3c>)
 80022bc:	1b64      	subs	r4, r4, r5
 80022be:	10a4      	asrs	r4, r4, #2
 80022c0:	42a6      	cmp	r6, r4
 80022c2:	d109      	bne.n	80022d8 <__libc_init_array+0x24>
 80022c4:	f000 f822 	bl	800230c <_init>
 80022c8:	2600      	movs	r6, #0
 80022ca:	4d0a      	ldr	r5, [pc, #40]	; (80022f4 <__libc_init_array+0x40>)
 80022cc:	4c0a      	ldr	r4, [pc, #40]	; (80022f8 <__libc_init_array+0x44>)
 80022ce:	1b64      	subs	r4, r4, r5
 80022d0:	10a4      	asrs	r4, r4, #2
 80022d2:	42a6      	cmp	r6, r4
 80022d4:	d105      	bne.n	80022e2 <__libc_init_array+0x2e>
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022dc:	4798      	blx	r3
 80022de:	3601      	adds	r6, #1
 80022e0:	e7ee      	b.n	80022c0 <__libc_init_array+0xc>
 80022e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e6:	4798      	blx	r3
 80022e8:	3601      	adds	r6, #1
 80022ea:	e7f2      	b.n	80022d2 <__libc_init_array+0x1e>
 80022ec:	0800235c 	.word	0x0800235c
 80022f0:	0800235c 	.word	0x0800235c
 80022f4:	0800235c 	.word	0x0800235c
 80022f8:	08002360 	.word	0x08002360

080022fc <memset>:
 80022fc:	4603      	mov	r3, r0
 80022fe:	4402      	add	r2, r0
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	f803 1b01 	strb.w	r1, [r3], #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <_init>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr

08002318 <_fini>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	bf00      	nop
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr
